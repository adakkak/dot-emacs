(defun add-to-load-path (fn)
 "Add expanded file name to load path.
Trailing slashes are stripped and duplicate names are not added."
 (let ((ffn (expand-file-name fn)))
   (if (eq (substring ffn -1) "/")
       (setq ffn (substring ffn 0 -1)))
   (if (not (member ffn load-path))
       (setq load-path (cons ffn load-path)))))

(add-to-load-path "~/.emacs.d")
(add-to-load-path "~/.emacs.d/emacs-rails")
(add-to-load-path "~/.emacs.d/color-theme")
(add-to-load-path "~/.emacs.d/rhtml")
(add-to-load-path "~/.emacs.d/nxml")
(add-to-load-path "~/.emacs.d/cc-mode")

(autoload 'js2-mode "js2" nil t)

(require 'rails)
(require 'erlang)
(require 'yaml-mode)
(require 'textile-mode)
(require 'cheat)
(require 'vc-git)
(when (featurep 'vc-git) (add-to-list 'vc-handled-backends 'git))
(require 'git)
(autoload 'git-blame-mode "git-blame" "Minor mode for incremental blame for Git." t)
(require 'ido)
(ido-mode t)
(require 'linum)
(global-linum-mode 1)
(require 'color-theme)
(require 'nxml-mode)
(require 'rhtml-mode)
;;(require 'cc-mode)

(add-to-list 'auto-mode-alist '("\\.c$" . c-mode))
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.textile\\'" . textile-mode))
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.erl\\'" . erlang-mode))
(add-to-list 'auto-mode-alist '("\\.hrl\\'" . erlang-mode))
;;(add-to-list 'auto-mode-alist '("\\.html.erb\\'" . html-mode))

(setq mac-option-modifier 'meta)
(setq mac-command-modifier 'hyper)

(global-set-key [(meta s)] 'shell)
(global-set-key [(hyper T)] 'find-tag)
(global-set-key [(hyper a)] 'mark-whole-buffer)
(global-set-key [(hyper v)] 'yank)
(global-set-key [(hyper c)] 'kill-ring-save)
(global-set-key [(hyper g)] 'git-status)
(global-set-key [(hyper x)] 'kill-region)
(global-set-key [(hyper s)] 'save-buffer)
(global-set-key [(hyper l)] 'goto-line)
(global-set-key [(hyper o)] 'find-file)
(global-set-key [(hyper f)] 'find-grep-dired)
(global-set-key [(hyper \])] 'indent-rigidly)
(global-set-key [(hyper \[)] (lambda (start end arg) (interactive "r\np") (indent-rigidly start end (- arg))))
(global-set-key [(hyper w)] (lambda () (interactive) (kill-buffer (current-buffer))))
(global-set-key [(hyper right)] 'other-frame)
(global-set-key [(hyper left)] 'other-frame)
(global-set-key [(hyper z)] 'undo)
(global-set-key "\C-c\C-i" 'color-theme-initialize)
(global-set-key "\C-c\C-tv" 'color-theme-vivid-chalk)

(fset 'yes-or-no-p 'y-or-n-p)

(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

;; Require clojure-mode to load and associate it to all .clj files.
(setq load-path (cons "~/opt/clojure-mode" load-path))
(require 'clojure-mode)
(setq auto-mode-alist
      (cons '("\\.clj$" . clojure-mode)
            auto-mode-alist))
(setq load-path (cons "~/opt/swank-clojure" load-path))
(require 'swank-clojure-autoload)       
       (swank-clojure-config
	          (setq swank-clojure-jar-path "~/usr/clojure/clojure.jar")
		  (setq swank-clojure-extra-classpaths (list "~/usr/clojure-contrib/clojure-contrib.jar")))

(autoload 'run-ruby "inf-ruby"
  "Run an inferior Ruby process")
(autoload 'inf-ruby-keys "inf-ruby"
  "Set local key defs for inf-ruby in ruby-mode")
(add-hook 'ruby-mode-hook
          '(lambda ()
             (inf-ruby-keys)
             ))

(setq inferior-lisp-program "/usr/bin/clisp")
(add-to-list 'load-path "~/opt/slime")
(require 'slime)
(slime-setup)
(eval-after-load "slime"
  '(slime-setup '(slime-fancy slime-banner)))

(defun toggle-fullscreen ()
  (interactive)
  (set-frame-parameter nil 'fullscreen (if (frame-parameter nil 'fullscreen)
                                           nil
                                           'fullboth)))
(global-set-key [(meta return)] 'toggle-fullscreen)

(defun copy-line (n)
  (interactive "p")
  (kill-ring-save (line-beginning-position) (line-beginning-position (1+ n))))
(global-set-key "\C-cl" 'copy-line)

(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(setq scroll-conservatively 5)
(mouse-avoidance-mode 'jump)
(setq gc-cons-threshold 50000000)

(custom-set-variables
 '(load-home-init-file t t))

(push "~/.emacs.d/distel/elisp/" load-path)
(require 'distel)
(distel-setup)

(add-hook 'erlang-mode-hook
            '(lambda ()
               (unless erl-nodename-cache
                 (distel-load-shell))))
(defun distel-load-shell ()
    "Load/reload the erlang shell connection to a distel node"
    (interactive)
    (setq erl-nodename-cache 'emacs@cilin)
    (setq distel-modeline-node "emacs")
    (force-mode-line-update)
    (let ((file-buffer (current-buffer))
          (file-window (selected-window)))
      (setq inferior-erlang-machine-options '("-sname" "emacs@cilin"))
      (switch-to-buffer-other-window file-buffer)
      (inferior-erlang)
      (select-window file-window)
      (switch-to-buffer file-buffer)))
(add-hook 'erlang-mode-hook
	  (lambda ()
	    (setq inferior-erlang-machine-options '("-sname" "emacs"))
	    (imenu-add-to-menubar "imenu")))
(defconst distel-shell-keys
  '(("\C-\M-i"   erl-complete)
    ("\M-?"      erl-complete)	
    ("\M-."      erl-find-source-under-point)
    ("\M-,"      erl-find-source-unwind) 
    ("\M-*"      erl-find-source-unwind) 
    )
  "Additional keys to bind when in Erlang shell.")
(add-hook 'erlang-shell-mode-hook
	  (lambda ()
	    (dolist (spec distel-shell-keys)
	      (define-key erlang-shell-mode-map (car spec) (cadr spec)))))

(custom-set-faces)
(global-font-lock-mode 1)

(add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet) ;; not yasnippet-bundle
(yas/initialize)
(yas/load-directory "~/.emacs.d/plugins/yasnippet/snippets")

(add-to-list 'load-path "~/.emacs.d/anything" load-path)
(require 'anything)
(require 'anything-config)

(add-to-list 'load-path "~/.emacs.d/org-mode" load-path)
(require 'org-install)
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-font-lock-mode 1)                     ; for all buffers
(add-hook 'org-mode-hook 'turn-on-font-lock)  ; Org buffers only

(load-file "~/.emacs.d/cedet/common/cedet.el")
(semantic-load-enable-guady-code-helpers)

(autoload 'markdown-mode "markdown-mode.el"
   "Major mode for editing Markdown files" t)
(setq auto-mode-alist
   (cons '("\\.markdown" . markdown-mode) auto-mode-alist))


;; tell emacs that bullets are the start of paragraphs
;; so that wrapping with M-q works
(setq paragraph-start "\\*\\|$" 
          paragraph-separate "$")

;; start ispell in current directory
(setq ispell-process-directory (expand-file-name "~/"))

;; disable emacs bell
(setq visible-bell t)
