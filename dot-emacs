(defun add-to-load-path (fn)
 "Add expanded file name to load path.
Trailing slashes are stripped and duplicate names are not added."
 (let ((ffn (expand-file-name fn)))
   (if (eq (substring ffn -1) "/")
       (setq ffn (substring ffn 0 -1)))
   (if (not (member ffn load-path))
       (setq load-path (cons ffn load-path)))))

(add-to-load-path "~/.emacs.d")
(add-to-load-path "~/.emacs.d/emacs-rails")
(add-to-load-path "~/.emacs.d/clojure-mode")
(add-to-load-path "~/.emacs.d/color-theme")
(add-to-load-path "~/.emacs.d/rhtml")
(add-to-load-path "~/.emacs.d/nxml")

(autoload 'js2-mode "js2" nil t)

(require 'rails)
(require 'erlang)
(require 'yaml-mode)
(require 'textile-mode)
(require 'cheat)
(require 'vc-git)
(when (featurep 'vc-git) (add-to-list 'vc-handled-backends 'git))
(require 'git)
(autoload 'git-blame-mode "git-blame" "Minor mode for incremental blame for Git." t)
(require 'ido)
(ido-mode t)
(require 'linum)
(global-linum-mode 1)
(require 'color-theme)
(require 'nxml-mode)
(require 'rhtml-mode)

(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.textile\\'" . textile-mode))
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.erl\\'" . erlang-mode))
(add-to-list 'auto-mode-alist '("\\.hrl\\'" . erlang-mode))
;;(add-to-list 'auto-mode-alist '("\\.html.erb\\'" . html-mode))

(setq mac-option-modifier 'meta)
(setq mac-command-modifier 'hyper)

(global-set-key [(meta s)] 'shell)
(global-set-key [(hyper T)] 'find-tag)
(global-set-key [(hyper a)] 'mark-whole-buffer)
(global-set-key [(hyper v)] 'yank)
(global-set-key [(hyper c)] 'kill-ring-save)
(global-set-key [(hyper g)] 'git-status)
(global-set-key [(hyper x)] 'kill-region)
(global-set-key [(hyper s)] 'save-buffer)
(global-set-key [(hyper l)] 'goto-line)
(global-set-key [(hyper o)] 'find-file)
(global-set-key [(hyper f)] 'find-grep-dired)
(global-set-key [(hyper \])] 'indent-rigidly)
(global-set-key [(hyper \[)] (lambda (start end arg) (interactive "r\np") (indent-rigidly start end (- arg))))
(global-set-key [(hyper w)] (lambda () (interactive) (kill-buffer (current-buffer))))
(global-set-key [(hyper right)] 'other-frame)
(global-set-key [(hyper left)] 'other-frame)
(global-set-key [(hyper z)] 'undo)
(global-set-key "\C-c\C-i" 'color-theme-initialize)
(global-set-key "\C-c\C-tv" 'color-theme-vivid-chalk)

(fset 'yes-or-no-p 'y-or-n-p)

(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

;;; Clojure Mode
(setq inferior-lisp-program
      (let* ((java-path "java")               ; Path to java implementation
             (java-options "")                ; Extra command-line options to java.
             (clojure-path "~/usr/clojure/")  ; Base directory to Clojure.
             (class-path-delimiter ";")       ; The character between  elements of your classpath.
             (class-path (mapconcat (lambda (s) s)
                                    (list (concat clojure-path "clojure-lang-1.0-SNAPSHOT.jar"))
                                    class-path-delimiter)))
        (concat java-path
                " " java-options
                " -cp " class-path
                " clojure.lang.Repl")))

;; Require clojure-mode to load and associate it to all .clj files.
(setq load-path (cons "insert path to folder with clojure-mode stuff" load-path))
(require 'clojure-mode)
(setq auto-mode-alist
      (cons '("\\.clj$" . clojure-mode)
            auto-mode-alist))

;; These are extra key defines because I kept typing them.
;; Within clojure-mode, have Ctrl-x Ctrl-e evaluate the last
;; expression.
;; Ctrl-c Ctrl-e is also there, because I kept typoing it.
(add-hook 'clojure-mode-hook
          '(lambda ()
             (define-key clojure-mode-map "\C-c\C-e" 'lisp-eval-last-sexp)
             (define-key clojure-mode-map "\C-x\C-e" 'lisp-eval-last-sexp)))

(autoload 'run-ruby "inf-ruby"
  "Run an inferior Ruby process")
(autoload 'inf-ruby-keys "inf-ruby"
  "Set local key defs for inf-ruby in ruby-mode")
(add-hook 'ruby-mode-hook
          '(lambda ()
             (inf-ruby-keys)
             ))

(setq inferior-lisp-program "/usr/bin/clisp")
(add-to-list 'load-path "~/opt/slime")
(require 'slime)
(slime-setup)
(eval-after-load "slime"
  '(slime-setup '(slime-fancy slime-banner)))

(defun toggle-fullscreen ()
  (interactive)
  (set-frame-parameter nil 'fullscreen (if (frame-parameter nil 'fullscreen)
                                           nil
                                           'fullboth)))
(global-set-key [(meta return)] 'toggle-fullscreen)

(defun copy-line (n)
  (interactive "p")
  (kill-ring-save (line-beginning-position) (line-beginning-position (1+ n))))
(global-set-key "\C-cl" 'copy-line)

(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(setq scroll-conservatively 5)
(mouse-avoidance-mode 'jump)
(setq gc-cons-threshold 50000000)

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(backup-directory-alist (quote (("." . "~/emacs.backups"))))
 '(column-number-mode t)
 '(ido-enable-flex-matching t)
 '(inhibit-startup-screen t)
 '(menu-bar-mode t)
 '(show-paren-mode t)
 '(speedbar-frame-parameters (quote ((minibuffer) (width . 20) (border-width . 0) (menu-bar-lines . 0) (tool-bar-lines . 0) (unsplittable . t) (set-background-color "black"))))
 '(standard-indent 2))

(push "~/.emacs.d/distel/elisp/" load-path)
(require 'distel)
(distel-setup)

(add-hook 'erlang-mode-hook
            '(lambda ()
               (unless erl-nodename-cache
                 (distel-load-shell))))
(defun distel-load-shell ()
    "Load/reload the erlang shell connection to a distel node"
    (interactive)
    (setq erl-nodename-cache 'emacs@cilin)
    (setq distel-modeline-node "emacs")
    (force-mode-line-update)
    (let ((file-buffer (current-buffer))
          (file-window (selected-window)))
      (setq inferior-erlang-machine-options '("-sname" "emacs@cilin"))
      (switch-to-buffer-other-window file-buffer)
      (inferior-erlang)
      (select-window file-window)
      (switch-to-buffer file-buffer)))
(add-hook 'erlang-mode-hook
	  (lambda ()
	    (setq inferior-erlang-machine-options '("-sname" "emacs"))
	    (imenu-add-to-menubar "imenu")))
(defconst distel-shell-keys
  '(("\C-\M-i"   erl-complete)
    ("\M-?"      erl-complete)	
    ("\M-."      erl-find-source-under-point)
    ("\M-,"      erl-find-source-unwind) 
    ("\M-*"      erl-find-source-unwind) 
    )
  "Additional keys to bind when in Erlang shell.")
(add-hook 'erlang-shell-mode-hook
	  (lambda ()
	    (dolist (spec distel-shell-keys)
	      (define-key erlang-shell-mode-map (car spec) (cadr spec)))))

(add-to-list 'load-path "~/.emacs.d/plugins")
(require 'yasnippet) ;; not yasnippet-bundle
(yas/initialize)
(yas/load-directory "~/.emacs.d/plugins/yasnippet/snippets")

(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:stipple nil :background "Grey15" :foreground "Grey" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 107 :width normal :foundry "unknown" :family "DejaVu Sans Mono"))))
 '(background "blue")
 '(font-lock-builtin-face ((((class color) (background dark)) (:foreground "Turquoise"))))
 '(font-lock-comment-face ((t (:foreground "MediumAquamarine"))))
 '(font-lock-constant-face ((((class color) (background dark)) (:bold t :foreground "DarkOrchid"))))
 '(font-lock-doc-string-face ((t (:foreground "green2"))))
 '(font-lock-function-name-face ((t (:foreground "SkyBlue"))))
 '(font-lock-keyword-face ((t (:bold t :foreground "CornflowerBlue"))))
 '(font-lock-preprocessor-face ((t (:italic nil :foreground "CornFlowerBlue"))))
 '(font-lock-reference-face ((t (:foreground "DodgerBlue"))))
 '(font-lock-string-face ((t (:foreground "LimeGreen"))))
 '(font-lock-type-face ((t (:foreground "#9290ff"))))
 '(font-lock-variable-name-face ((t (:foreground "PaleGreen"))))
 '(font-lock-warning-face ((((class color) (background dark)) (:foreground "yellow" :background "red"))))
 '(highlight ((t (:background "CornflowerBlue"))))
 '(list-mode-item-selected ((t (:background "gold"))) t)
 '(makefile-space-face ((t (:background "wheat"))))
 '(mode-line ((t (:background "Navy"))))
 '(paren-match ((t (:background "darkseagreen4"))))
 '(region ((t (:background "DarkSlateBlue"))))
 '(show-paren-match ((t (:foreground "black" :background "wheat"))))
 '(show-paren-mismatch ((((class color)) (:foreground "white" :background "red"))))
 '(speedbar-button-face ((((class color) (background dark)) (:foreground "green4"))))
 '(speedbar-directory-face ((((class color) (background dark)) (:foreground "khaki"))))
 '(speedbar-file-face ((((class color) (background dark)) (:foreground "cyan"))))
 '(speedbar-tag-face ((((class color) (background dark)) (:foreground "Springgreen"))))
 '(vhdl-speedbar-architecture-selected-face ((((class color) (background dark)) (:underline t :foreground "Blue"))))
 '(vhdl-speedbar-entity-face ((((class color) (background dark)) (:foreground "darkGreen"))))
 '(vhdl-speedbar-entity-selected-face ((((class color) (background dark)) (:underline t :foreground "darkGreen"))))
 '(vhdl-speedbar-package-face ((((class color) (background dark)) (:foreground "black"))))
 '(vhdl-speedbar-package-selected-face ((((class color) (background dark)) (:underline t :foreground "black"))))
 '(widget-field ((((class grayscale color) (background light)) (:background "DarkBlue")))))
(global-font-lock-mode 1)
